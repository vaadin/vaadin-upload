{"version":3,"sources":["vaadin-upload.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;QAeM,oCAAoC;;;;;;;;;;;;;YAApC,oCAAoC,GAAG,iBAAU,CAAC,IAAI,eAAQ,CAChE,0BAAiB,EAAE;gBACjB,WAAW,EAAE,iBAAU,CAAC,cAAM,OAAA,YAAY,EAAZ,CAAY,CAAC;gBAC3C,KAAK,EAAE,IAAI;aACZ,CAAC,CAAC,CAAC;YAMR;gBAAkC,gCAAoB;gBAoBpD,sBAAY,QAAkB,EAAE,EAAc,EAAW,SAAmB;oBApB9E,iBAiCC;oBAZG,kBAAM,QAAQ,EAAE,EAAE,CAAC,CAAC;oBADmC,cAAS,GAAT,SAAS,CAAU;oBAjBpE,qBAAgB,GAAG,KAAK,CAAC;oBAEvB,gBAAW,GAAsB,IAAI,mBAAY,CAAC,KAAK,CAAC,CAAC;oBAkBjE,EAAE,CAAC,CAAC,CAAO,MAAO,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;wBACpE,OAAO,CAAC,KAAK,CAAC,+GAA+G,CAAC,CAAC;wBAC/H,MAAM,CAAC;oBACT,CAAC;oBAED,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,aAAa,CAAC;oBACjC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,gBAAgB,CAAC,MAAM,EAAE;wBACxD,KAAI,CAAC,SAAS,EAAE,CAAC;oBACnB,CAAC,CAAC,CAAC;gBACL,CAAC;gBAzBD,mCAAY,GAAZ;oBACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;wBAC3B,gEAAgE;wBAChE,mCAAmC;wBACnC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;wBAC7B,MAAM,CAAC;oBACT,CAAC;oBAED,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;oBAClC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAC7B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBACvB,CAAC;gBAbD;oBAAC,aAAM,EAAE;;iEAAA;gBACT;oBAAC,mBAAY,CAAC,eAAe,CAAC;;;;gEAAA;gBAVhC;oBAAC,gBAAS,CAAC;wBACT,QAAQ,EAAE,eAAe;wBACzB,SAAS,EAAE,CAAC,oCAAoC,CAAC;qBAClD,CAAC;;gCAAA;gBAkCF,mBAAC;YAAD,CAjCA,AAiCC,CAjCiC,6BAAoB,GAiCrD;YAjCD,uCAiCC,CAAA","file":"vaadin-upload.js","sourcesContent":["import {\n  Injector,\n  Directive,\n  ElementRef,\n  Output,\n  HostListener,\n  EventEmitter,\n  Provider,\n  forwardRef,\n  Renderer\n} from 'angular2/core';\nimport { NgControl, NG_VALUE_ACCESSOR, DefaultValueAccessor } from 'angular2/common';\nimport { CONST_EXPR } from 'angular2/src/facade/lang';\ndeclare var Polymer;\n\nconst VAADIN_UPLOAD_CONTROL_VALUE_ACCESSOR = CONST_EXPR(new Provider(\n    NG_VALUE_ACCESSOR, {\n      useExisting: forwardRef(() => VaadinUpload),\n      multi: true\n    }));\n\n@Directive({\n  selector: 'vaadin-upload',\n  providers: [VAADIN_UPLOAD_CONTROL_VALUE_ACCESSOR]\n})\nexport class VaadinUpload extends DefaultValueAccessor {\n\n  private _element;\n  private _initialValueSet = false;\n\n  @Output() filesChange: EventEmitter<any> = new EventEmitter(false);\n  @HostListener('files-changed')\n  fileschanged() {\n    if (!this._initialValueSet) {\n      // Do not trigger onChange when the initial (empty) value is set\n      // to keep the field as \"pristine\".\n      this._initialValueSet = true;\n      return;\n    }\n\n    const value = this._element.files;\n    this.filesChange.emit(value);\n    this.onChange(value);\n  }\n\n  constructor(renderer: Renderer, el: ElementRef,  private _injector: Injector) {\n    super(renderer, el);\n\n    if (!(<any>window).Polymer ||Â !Polymer.isInstance(el.nativeElement)) {\n      console.error(\"vaadin-upload has not been imported yet, please remember to import vaadin-upload.html in your main HTML page.\");\n      return;\n    }\n\n    this._element = el.nativeElement;\n    this._element.$$('paper-button').addEventListener('blur', () => {\n      this.onTouched();\n    });\n  }\n}\n"],"sourceRoot":"/source/"}